<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>野猪一九九五</title>
        <description>野猪一九九五 - 李林</description>
        <link>http://wildpig95.github.io</link>
        <link>http://wildpig95.github.io</link>
        <lastBuildDate>2015-03-26T22:52:41+08:00</lastBuildDate>
        <pubDate>2015-03-26T22:52:41+08:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>我读《电子口岸—实用功能》</title>
                <description>&lt;p&gt;话说自己出来之后，涉及到海关电子口岸数据中心一些活。木法儿，不懂业务就木办法跟客户深入交流，来不得项目，也就没有办法做好自己想做的产品。唯有恶补，在省图借了基本关于海关信息化的书籍了解一下业务。这里通过文字梳理出来，也帮助理解，就当读书笔记了。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;中国海关自己出的这一套介绍性图书“关务通.电子口岸系列”，从IT人的角度来说，这本《电子口岸—使用功能》基本上可以理解成为《电子口岸综合信息管理系统说明书》。&lt;/p&gt;

&lt;p&gt;文中大量的文字和图片描述了电子口岸各系统的如何使用，谁来使用，干什么用的问题。这些东西拿来成册出书，感觉有点怪。不过作了这些年中国人，能理解作为中国海关出版社，总要做点事情、歌功颂德、拿来表功的迫切心情。其实，让开发厂商出个电子文档放在百度文库上，正能量就杠杠的了。&lt;/p&gt;

&lt;p&gt;对于希望了解电子口岸业务的人来说，倒不失为一种扫盲手段。从图书馆借了这本书，快速浏览，马上总结。希望对大伙有帮助。&lt;/p&gt;

&lt;p&gt;本书内容不多，包含5个章节。主要说明了几个问题：&lt;/p&gt;

&lt;p&gt;1 什么是电子口岸？
2 电子口岸的客户有哪些？
3 在使用电子口岸系统之前需要做哪些准备工作？
4 电子口岸的执法系统都有哪些？
5 电子口岸的预录入系统是怎么回事？&lt;/p&gt;

&lt;p&gt;我们逐个掰扯掰扯：&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;么是电子口岸？&lt;/h1&gt;

&lt;p&gt;进出口贸易本身并不是多复杂，但是环节较多，只有海关一个部门搞不定所有的进出口贸易管理。在中国”国强民弱”的背景下，国务院下属15个部位机关都要对进出口贸易的相关环节进行管理。同时，政府信息化的要求也带来了问题，进出口贸易的这些业务信息流、资金信息流和货物信息流又需要集中化管理。因此，国务院让海关总署牵头，其他部门配合，建设电子口岸系统。&lt;/p&gt;

&lt;p&gt;对外贸企业来说，电子口岸是报关、网上支付、外汇核销、出口退税等“一站式”政务服务平台；
对政府来说，电子口岸是数据共享、联网核查的数据汇聚点；&lt;/p&gt;

&lt;p&gt;电子口岸分两级架构，国家电子口岸（国务院15个部门共同建设，主要为政府服务）；地方电子口岸由地方政府牵头建设，为政府和外贸企业提供服务。&lt;/p&gt;

&lt;p&gt;电子口岸归根到底是为外贸服务和政府管理外贸服务的信息平台。注意：平台就是平台，不是机关单位实体。谁来建设这个平台呢？中国电子口岸数据中心以及各地电子口岸数据分中心。2001年成立，是电子口岸的建设主体事业单位，具备独立法人资格（直属于海关总署）。负责电子口岸的日常开发、运维和客服工作。&lt;/p&gt;

&lt;p&gt;说早年间，数据中心是承办电子口岸用户卡制作的，赶上信息化的时代，也就顺理成章的发展壮大起来。这里面的问题随着业务了解的深入，回头讨论：）&lt;/p&gt;

&lt;p&gt;数据中心成立10多年来，干了有117个应用项目，政府服务的32个，企业服务42个，物流商务服务的23个，工具类15个，安全类5个。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;谁来用电子口岸平台？&lt;/h1&gt;

&lt;p&gt;分两类，一类是企业通关相关的企业。包括专门的报关企业和代理报关企业，外贸企业（一般有规模的外贸玩家），加贸企业（没有进出口经营权）相对比较低端的来料加工、进料加工等等。&lt;/p&gt;

&lt;p&gt;另外一类是政府机关。包括商务、外汇局、海关、国税、工商管理、技术监督、银行等。&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;在中国做外贸的第一步？ 敲门砖&lt;/h1&gt;

&lt;p&gt;首先你得经过电子口岸认可你，得去申请办卡（IC卡），有了IC卡，就可以登录电子口岸的相关系统做各种业务。所以海关的IC卡就是外贸的敲门砖。需要6个步骤申请办理。&lt;/p&gt;

&lt;p&gt;在互联网时代，如果这个业务让BAT提供服务，分分钟搞定，就像你去申请个腾讯微信公众号，或者在阿里巴巴开个网店。&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;电子口岸执法系统&lt;/h1&gt;

&lt;p&gt;电子口岸执法系统这个名字没有起好。这套系统其实是外贸公司从事进出口贸易过程中，如果涉及到外汇业务（收汇、付汇）、退税、网上支付等业务时，通过电子口岸执法系统的对应子系统进行业务操作。&lt;/p&gt;

&lt;p&gt;由于这些业务流程里面涉及国家机关的核查、审批等工作，所以这些活统称为“执法系统”。但实际上，这些工作只是企业完成整个外贸业务的一个环节，应该以企业服务的理念出发，统称为“通关服务系统”。&lt;/p&gt;

&lt;p&gt;对于的确需要核查的，在政府机关内部称之为”执法核查“系统没有啥问题，甚至执法核查可以通过时候进行抽检，通过建立企业商业诚信档案，以及相关法律法规的配套完善，引导企业走上遵守法律法规的健康之路。&lt;/p&gt;

&lt;p&gt;电子口岸执法系统包括出口收汇，进口付汇，退税系统，网上支付系统，无纸化网上签约，代理报关委托，企业单子系统，快件管理，小型船舶（深圳），公路口岸（广东），身份认证，监管证件联网（ATA单证册，环保许可，汽车进口，海关与贸促会原产地证书电子联网核查，中欧安全智能贸易航线等）。&lt;/p&gt;

&lt;h1 id=&quot;qpquick-pass&quot;&gt;电子口岸预录入系统（QP:quick pass）&lt;/h1&gt;

&lt;p&gt;这部分就是纯的企业服务系统了，包括通关管理类系统，加工贸易类系统，企业管理类系统，物流监管类系统，减免税类系统以及其他系统。&lt;/p&gt;

&lt;p&gt;种类繁多，业务复杂，从面儿上看是这样的。其实很多事情是前期规划不足，历史遗留问题，管理权限过大，服务意识不足导致的信息孤岛，纯功能或者领导意思为转移的”难用“系统转嫁到企业头上。&lt;/p&gt;

&lt;p&gt;还有啊，为啥叫做quick pass呢？主要是各类外贸企业的信息申报，你要做什么事情，要提前报上来让海关知道，海关看看能不能做，实际的核心业务含义是通关申报业务。&lt;/p&gt;

&lt;p&gt;本书的读书笔记就到这里吧。&lt;/p&gt;
</description>
                <link>http://wildpig95.github.io/book/2015/03/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_%E7%94%B5%E5%AD%90%E5%8F%A3%E5%B2%B8%E5%AE%9E%E7%94%A8%E5%8A%9F%E8%83%BD</link>
                <guid>http://wildpig95.github.io/book/2015/03/23/读书笔记_电子口岸实用功能</guid>
                <pubDate>2015-03-23T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>在Jekyll上使用分页</title>
                <description>&lt;p&gt;一个博客不可能只有几篇文章，如果所有文章全部放在一个页面中，在文章不多的情况下也许较为直观，一旦文章数量增加，不仅加大了用户需要加载的数据量，也为用户检索文章造成了障碍，所以基本上每个博客都会有文章的分页。一般的分页都是通过像JSP的模板引擎直接在从数据库中分页取出时生成动态生成页面，或者通过ajax从数据库分页取出传递到前端。但现在github+jekyll是静态的页面，没有数据库。好在jekyll支持分页功能。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;section&quot;&gt;开启分页功能&lt;/h1&gt;

&lt;p&gt;首先我们需要在jekyll中开启分页功能，在jekyll的_config.yml中加入分页配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;paginate: 5
paginate_path: &quot;page:num&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一行定义了每页的文章数量，而第二行则定义了在分页的结果，比如在/index.html中使用分页，定义为page:num，则第二页的路径将是/page2/index.html，第三页的路径将是/page3/index.html，以此类推。&lt;/p&gt;

&lt;p&gt;需要注意的几个点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;分页只在html文件中起作用&lt;/li&gt;
  &lt;li&gt;paginate_path同时定义了需要被分页的文件，本人测试这个叫index.html，具体目录由paginate_path中的路径定义，如果定义的目录没有，则会向上寻找index.html，直到根目录的index.html，具体机制官网上没有详细说，所以还需要进一步实验&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-1&quot;&gt;使用分页&lt;/h1&gt;

&lt;p&gt;只是开启了分页还没有用，我们需要确实使用到首页之中，在首页(/index.html)中添加如下代码：&lt;/p&gt;

&lt;p&gt;这样，jekyll就会根据paginator来进行分页了，被分出来多少页，就会有多少个页面生成。排1-5的文章就在/index.html中了，而排6-10的文章则在/page2/index.html中，依次类推。&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;换页&lt;/h1&gt;

&lt;p&gt;只是分页还不够，我们还需要在每个页面上做一个跳转到其他页面的导航，这里需要用到paginator的一些其他属性。&lt;/p&gt;

&lt;p&gt;首先检测总的页数，如果只有一页，自然就不需要分页了。通过paginator的total_pages属性能判断总页数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% if paginator.total_pages &amp;gt; 1 %}
&amp;lt;!-- 分页代码 --&amp;gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们需要一个跳转到上一页的按钮，这个按钮在第一页不需要显示，通过paginator的previous_page属性来判断是否是第一个页面，使用paginator的previous_page_path来输出上一页的路径，注意在前面添加baseurl，并进行一些必要的字符替换：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% if paginator.previous_page %}
    &amp;lt;a href=&quot;{{ paginator.previous_page_path | prepend: site.baseurl | replace: &#39;//&#39;, &#39;/&#39; }}&quot;上一页&amp;lt;/a&amp;gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着是生成所有页面的按钮，并使当前页按钮无效化，遍历所有页面，使用paginator的page属性来确定当前页，如果是当前页，则按钮无效，否则使用&lt;code&gt;{{ site.paginate_path | prepend: site.baseurl | replace: &#39;//&#39;, &#39;/&#39; | replace: &#39;:num&#39;, page }}&lt;/code&gt;来将&lt;code&gt;:num&lt;/code&gt;替换成当前页面的数字生成页面路径：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for page in (1..paginator.total_pages) %}
    {% if page == paginator.page %}
      &amp;lt;span class=&quot;active&quot;&amp;gt;{{ page }}&amp;lt;/span&amp;gt;
    {% elsif page == 1 %}
      &amp;lt;a href=&quot;{{ &#39;/index.html&#39; | prepend: site.baseurl | replace: &#39;//&#39;, &#39;/&#39; }}&quot;&amp;gt;{{ page }}&amp;lt;/a&amp;gt;
    {% else %}
      &amp;lt;a href=&quot;{{ site.paginate_path | prepend: site.baseurl | replace: &#39;//&#39;, &#39;/&#39; | replace: &#39;:num&#39;, page }}&quot;&amp;gt;{{ page }}&amp;lt;/a&amp;gt;
    {% endif %}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后生成一个下一页的按钮，在最后一页不显示，和上一页按钮类似，通过paginator的next_page_path来确定是否还有下一页：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% if paginator.next_page %}
    &amp;lt;a href=&quot;{{ paginator.next_page_path | prepend: site.baseurl | replace: &#39;//&#39;, &#39;/&#39; }}&quot;&amp;gt;下一页&amp;lt;/a&amp;gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样一个完整的分页导航功能就做好了，效果就和博客主页上的分页效果是一样的。&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;jekyll的分页总的来说还算给力，基本的功能可以完成。但是有一些缺陷，就是category，tag的分类分页无法实现，必须通过插件的方式来做。但是github不允许三方插件，所以只能通过一些其他的方式实现了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;本文转自：&lt;a href=&quot;http://blog.segmentfault.com/skyinlayer/1190000000406015&quot;&gt;http://blog.segmentfault.com/skyinlayer/1190000000406015&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
                <link>http://wildpig95.github.io/daily/2014/07/26/pagination_on_jekyll</link>
                <guid>http://wildpig95.github.io/daily/2014/07/26/pagination_on_jekyll</guid>
                <pubDate>2014-07-26T00:00:00+08:00</pubDate>
        </item>


</channel>
</rss>
