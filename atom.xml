<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>野猪一九九五</title>
 <link href="http://wildpig95.github.io/" rel="self"/>
 <link href="http://wildpig95.github.io"/>
 <updated>2015-12-13T20:35:50+08:00</updated>
 <id>http://wildpig95.github.io</id>
 <author>
   <name>李林</name>
   <email></email>
 </author>

 
 <entry>
   <title>学习做产品（一）</title>
   <link href="http://wildpig95.github.io/think/2015/12/12/%E5%AD%A6%E4%B9%A0_pd"/>
   <updated>2015-12-12T00:00:00+08:00</updated>
   <id>http://wildpig95.github.io/think/2015/12/12/学习_pd</id>
   <content type="html">&lt;p&gt;与时俱进的学习产品应该怎么设计。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;section&quot;&gt;为什么？&lt;/h1&gt;

&lt;p&gt;我们需要更符合现在业务发展趋势的软件开展方法。敏捷软件开发的价值观与互联网产品的发展已经成为码农界的主流。在具体的软件开发过程中，作为产品经理应当明确自己的职责和目标，带领团队做出更出色的软件。&lt;/p&gt;

&lt;p&gt;需求了解和输出的过程是艰难的，很少有人真正把握客户，或者用户真正想要的。在互联网时代，产品经理会更多的从人性出发去解决问题（例如，张小龙对微信设计的解读）。&lt;/p&gt;

&lt;p&gt;用一堆大而全的需求模板去考虑需求的面面俱到，往往浪费大于收益。&lt;/p&gt;

&lt;p&gt;越来越多的人开始在日常工作中出发，分享和引导软件开发从传统走向互联网，产品经理的工作方法也随之更新，应当赶上趋势。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;怎么做？&lt;/h1&gt;

&lt;p&gt;知乎上提到一个比较有名的产品经理教学老师–尹广磊，提出了web页面的设计过程。可以作为参考内容：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.webppd.com/attachments/month_1103/1103081611a3ca5db1fd5646ae.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;用工具吗？&lt;/h1&gt;

&lt;p&gt;工具是可以提高工作效率的，最好的工具应该是在知识体系构建下的合理的方法论，配合高效的工具。&lt;/p&gt;

&lt;p&gt;AXURE还是Sketch，有人已经做了很好的分享。参考如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;著作权归作者所有。
商业转载请联系作者获得授权，非商业转载请注明出处。
作者：盗盗
链接：http://www.zhihu.com/question/26712715/answer/34060864
来源：知乎&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;作为一个同时掌握产品+交互+开发的人，我后来在项目中即时调整了我的工作流程，看我的Dock，我是如此安排在Code之前我的开发节奏的：Axure &amp;gt; Sketch &amp;gt; (QC) &amp;gt; … 对比之后，发现效率极大的提升，在设计成本一定的情况下，产品策划（Axure） 和 UI设计（Sketch）的时间成本可以保持在3:1的样子；而之前用Sketch的时候，我估计是5:1的样子，甚至更多….&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/ee8b51857e851cfee5e3d2bd5e03f5d1_b.jpg&quot; data-rawwidth=&quot;824&quot; data-rawheight=&quot;160&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;824&quot; data-original=&quot;https://pic2.zhimg.com/ee8b51857e851cfee5e3d2bd5e03f5d1_r.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我是这么理解我吃饭的家伙们的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Axure：梳理完成全部产品信息架构和功能。所以Auxre之于我的重要性他不是画图软件、不是交互软件，而更多的是帮助我从无到有梳理整个产品大的脉络&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sketch：基于之前的线框图增强设计感，具象之前的产品；如果产品理顺了的话，设计UI在Sketch的帮助下产出简直是飞速的，这也是Sketch之于Photoshop之流在做UI设计时候的牛逼之处。但是如果你错误的将Sketch定义为规划产品的工具，那产能会十分的低下&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;QC：仅针对一些极为复杂和细腻的交互动画（千万别试图拿QC当产品的交互工具，搞死你…），配合使用即可，也是帮助自己梳理特效的交互逻辑，避免在真实开发环境中走太多弯路。学习成本略高的软件，我今年上半年花了大力气学习的东西，传送门：Quartz Composer 如何入门？（目前QC我已经摒弃了，推荐Principle这款交互特效软件，更高效》》如何评价principle这款交互软件？）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Coding…（业余选手，主要是前端）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>什么是dcm4chee</title>
   <link href="http://wildpig95.github.io/dicom/2015/04/17/what_is_dcm4chee"/>
   <updated>2015-04-17T00:00:00+08:00</updated>
   <id>http://wildpig95.github.io/dicom/2015/04/17/what_is_dcm4chee</id>
   <content type="html">&lt;p&gt;医疗影像领域最有名的dicom服务系统，学习笔记&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;dcm4chee 是怎么一回事？&lt;/p&gt;

&lt;p&gt;今后公司的产品是提供在线医疗影像的咨询服务。需要深入的了解医疗影像DICOM协议以及基于DICOM协议之上的PACS系统和图像处理技术。&lt;/p&gt;

&lt;p&gt;从当前我们的眼界范围内，能够看到的业界相对认可的开源dicom系统是DCM4CHEE.&lt;/p&gt;

&lt;p&gt;因此，近期我的学习重点需要聚焦DCM4CHEE系统。&lt;/p&gt;

&lt;h1 id=&quot;dcm4chee&quot;&gt;1 DCM4CHEE是什么？&lt;/h1&gt;

&lt;p&gt;DCM4CHEE是一套开源的使用以java语言为主开发的兼容HL7和DICOMM等国际医疗信息化标准协议的完整服务框架实现。&lt;/p&gt;

&lt;p&gt;上面说法比较拗口，简单来说DCM4CHEE是一套医院可以用来作为pacs服务器的开源软件系统，就是功能全，比较得到大家认可而已。&lt;/p&gt;

&lt;p&gt;由于是java系统，该系统可以部署在包括windows，linux，osx和主流unix操作系统上。&lt;/p&gt;

&lt;p&gt;它需要数据的支持才能跑起来。可以使用的后台数据库包括postgreSQL,mysql，oracle，sqlserver等。&lt;/p&gt;

&lt;p&gt;系统结构参考下图：
&lt;img src=&quot;http://www.dcm4che.org/confluence/download/attachments/1179664/dcm4chee.jpg?version=3&amp;amp;modificationDate=1181883791590&quot; alt=&quot;系统结构图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过这段时间的学习，无论是dicom协议还是dcm4chee系统，有一个感觉不知道对不对。感觉协议的制定者们希望这套协议通吃天下，面面俱到，从软件系统架构上来说“偏重”。例如media creation manager 模块，是用来方便刻录光盘的，在协议的制定时代，刻录光盘可能是解决大数据量存储交换的一个重要因素，可是在互联网时代，当网络带宽和系统存储能力的增长，光盘介质已经“风光不再”，所以这个模块的很多能力，在未来不长的时间里面可能会逐步弱化甚至消亡。&lt;/p&gt;

&lt;p&gt;但是没有办法，如果想快速的具备pacs系统功能，对于一个行业外的人来说，dcm4chee是了解和学习这方面技术的不多的选择。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;2 系统安装&lt;/h1&gt;

&lt;p&gt;使用了mac OS操作系统，尝试着一遍一边介绍：&lt;/p&gt;

&lt;p&gt;a 安装环境准备&lt;/p&gt;

&lt;p&gt;需要JDK5.0以上，512M内存，200M硬盘存储，400MHZ CPU。通过这些环境就明白了，DCM4CHEE的确是出现比较早期的产品了。&lt;/p&gt;

&lt;p&gt;数据库我准备用mysql。&lt;/p&gt;

&lt;p&gt;图象压缩的注意事项：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果你是windows或者linux i586操作系统，恭喜，现有的dcm4chee版本可以满足要求了。&lt;/li&gt;
  &lt;li&gt;如果是linux-amd64 或者 solaris，需要额外下一个lib库。&lt;/li&gt;
  &lt;li&gt;如果是mac OS 或者是 64bit 的windows，就需要修改一个配置文件。这个会在step 8 章节说明。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;说了半天，系统的维护者们推荐dcm4chee系统安装在linux，solaris 和 windwos操作系统上。有个图片的组件需要java和本身应用之间的配合协作才能完成，自身应用在其他操作系统上不支持。&lt;/p&gt;

&lt;p&gt;b 安装步骤&lt;/p&gt;

&lt;p&gt;根据说明一步步的安装即可。windows平台有一个pacs.exe文件，运行后相关服务和应用一并启动。&lt;/p&gt;

&lt;p&gt;其他平台要一步步的走。这里就先不深入理解了。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;3 数据模型&lt;/h1&gt;

&lt;p&gt;如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.dcm4che.org/confluence/download/attachments/496/2.18.x%20Database%20Scheme.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;4 功能模块描述&lt;/h1&gt;

&lt;h2 id=&quot;web-based-ui&quot;&gt;web-based ui&lt;/h2&gt;

&lt;p&gt;基于浏览器web页面的前台管理界面&lt;/p&gt;

&lt;h2 id=&quot;dicom-storage&quot;&gt;dicom storage&lt;/h2&gt;

&lt;p&gt;提供任何dicom格式文件的存储功能，存储到一般的文件系统上。如果需要可以做压缩。&lt;/p&gt;

&lt;h2 id=&quot;dicom-queryretrieve&quot;&gt;dicom query/retrieve&lt;/h2&gt;

&lt;p&gt;查询和获取dicom对象&lt;/p&gt;

&lt;h2 id=&quot;wado-and-rid&quot;&gt;wado and rid&lt;/h2&gt;

&lt;p&gt;归档内容的web访问能力&lt;/p&gt;

&lt;h2 id=&quot;other-dicom-services&quot;&gt;other dicom services&lt;/h2&gt;

&lt;p&gt;其他dicom服务能力（基于dicom协议标准）&lt;/p&gt;

&lt;h2 id=&quot;hl7-server&quot;&gt;HL7 server&lt;/h2&gt;

&lt;p&gt;内部集成的一个HL7协议服务器，兼容主流的信息交互规范&lt;/p&gt;

&lt;h2 id=&quot;ihe-service&quot;&gt;IHE service&lt;/h2&gt;

&lt;p&gt;兼容IHE服务&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;通过以上内容的学习和思考，我们基本了解了dcm4chee是什么了。&lt;/p&gt;

&lt;p&gt;下面我们将回到dicom协议来学习这个协议的情况&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>读《pro git》- 让我们愉悦的读懂技术</title>
   <link href="http://wildpig95.github.io/book/2015/04/01/progit-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0"/>
   <updated>2015-04-01T00:00:00+08:00</updated>
   <id>http://wildpig95.github.io/book/2015/04/01/progit-读书笔记</id>
   <content type="html">&lt;p&gt;在知乎上，《pro git》作为入门“殿堂级”教程推荐。很早就想在项目上推行git作为配置管理工具，囿于原公司的各种信息安全傻规定，无法实现。现在有了条件，就好好学习一下，把git用好。&lt;/p&gt;

&lt;p&gt;我发现一个适用于自己的方法–强迫自己写读书笔记对理解业务或者技术都大有裨益，同时在博客中加入一些对软件开发的理解也会对其他人有一点点帮助。所以有了这篇。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;section&quot;&gt;配置管理是软件项目的基石&lt;/h1&gt;

&lt;p&gt;刚入行的时候（1999年），没人关注配置管理。在一家自封为中国第四大软件公司做开发。项目组有10来个人，大家就用微软的VSS做文档和代码的管理。经常遇到你覆盖我，我干掉你的囧局。虽然当时很气愤，也很想弄好，能力不济，也没什么人指导。但觉得对团队协同开发来说，配置管理作为一项基础性的工作非常有必要做好的。&lt;/p&gt;

&lt;p&gt;再后来到了菊花公司，软件开发非常的规范。使用SVN，只要掌握了“修改之前一定要update”的口诀，断然不能出错了。对于代码量在10万以内的项目来说，SVN表现的不错。我们团队在菊花公司变态QA审查之后还得了个质量奖。&lt;/p&gt;

&lt;p&gt;后来就开始做大项目，说好听的是企业级百万以上后台代码的工程，说不好听的是经年累月的史诗级史前巨坑的遗留系统。如果一个新人进项目组，不折腾三天，开发工程都搭建不起来，更遑论持续集成和自动化测试了。当时领导听说总部不少团队用clearcase，鸡冻的很，我一看，cao啊，更是“豪门深似海”的架势，就以工程替换量太大，开发人员不熟悉耽误开发效率为由拒绝了。&lt;/p&gt;

&lt;p&gt;在菊花公司研发体系，效率是法宝，说服领导采用“效率”一词的次数与成功率成正比，不管你是想拒绝还是想引导。&lt;/p&gt;

&lt;p&gt;后来跟业界的接触多了，知道了git。心向往之，当时也找兄弟学习了，强制在项目组内使用，效果却很差。在进度面前，这些都成了装逼。有个兄弟开玩笑的说，用git提交了代码今天居然保存住了！让我印象深刻。知道近期，看了《pro git》这本书，有点“相见恨晚”，反过头来看之前的问题，其实还是没有正确的学习和使用git吧。&lt;/p&gt;

&lt;h1 id=&quot;git&quot;&gt;git的基本概念&lt;/h1&gt;

&lt;p&gt;git的产生过程是一段传奇，我就不再貂尾续狗。&lt;/p&gt;

&lt;p&gt;学习和使用git，首先要thinking in git，不要拿传统的集中配置管理工具的概念来套git。他们的主要差异点：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;快照 VS 比较差异&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;git只关心文件数据的整体是否有变化，传统工具只关心具体文件是否有变化。git更像是把变化的文件做一次快照后，记录在一个微型的文件系统中。每次有代码提交，git会纵览一遍所有文件的指纹信息并对文件做一次快照，然后保存一个指向本次快照的索引。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;几乎所有操作都可本地执行&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;由于是分布式的配置管理，只要是开始用git，本地磁盘保存着所有有关当前项目的历史更新。所以操作起来非常快。可以在任何时间和地点进行git操作，而不用连接网络。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;时刻保持数据的完整性&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;在保存到git之前，所有数据都要进行内容的校验和chechsum计算，并将此结果作为数据的唯一标识和索引。使用SHA-1算法进行校验和checksum计算，会产生一个SHA-1的哈希值，作为指纹字符串。类似：24b9da6552252987aa493b52f8696cd6d3b00373 这个样子的。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;多数操作只添加数据&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;添加数据是可逆的，删除数据是不可逆的。如果经常提交快照，就不会产生数据丢失的问题。可靠性非常好。&lt;/p&gt;

&lt;p&gt;接下来我们看看，git的三种状态，核心概念务必理解。&lt;/p&gt;

&lt;p&gt;对于任何一个文件，git内只有三种状态：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;已提交（commited）：表示文件已经安全的保存到本地数据库中了。&lt;/li&gt;
  &lt;li&gt;已修改（modified）：表示文件已经修改，但是还没保存到本地数据库中。&lt;/li&gt;
  &lt;li&gt;已暂存（staged）：表示把已经修改的文件放到下次提交时要保存的清单中去了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有了这三种状态也就有了三类目录：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;工作目录：可以修改的文件存放这里。&lt;/li&gt;
  &lt;li&gt;本地数据目录：提交后存放到这里。&lt;/li&gt;
  &lt;li&gt;暂存区域：已经修改，但是没有提交的放在这里。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每个项目都有一个git目录，用来保存元数据和对象数据库的地方。每次克隆镜像仓库的时候，实际拷贝的就是这个目录里面的数据。从项目中取出的某个版本所有文件和目录，用以开始后续工作的叫做工作目录。这些文件实际上都是从git目录中的压缩对象数据中提取出来的，接下来就可以在工作目录中对这些文件进行编辑。&lt;/p&gt;

&lt;p&gt;而暂存区只不过是一个简单的文件，一般存放在git目录中。有时候人们会把这个文件叫做索引文件。&lt;/p&gt;

&lt;p&gt;基本的git工作流程是：&lt;/p&gt;

&lt;p&gt;1 在工作目录中修改某些文件。
2 对这些修改的文件做快照，并保存到暂存区。
3 提交更新，将保存在暂存区域的文件快照转储到git目录中。&lt;/p&gt;

&lt;p&gt;好了，掌握了这些基础知识，将非常有助于实际操作。不会乱了方寸。&lt;/p&gt;

&lt;p&gt;=== 未完待续 ===&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>我读《电子口岸—实用功能》</title>
   <link href="http://wildpig95.github.io/book/2015/03/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_%E7%94%B5%E5%AD%90%E5%8F%A3%E5%B2%B8%E5%AE%9E%E7%94%A8%E5%8A%9F%E8%83%BD"/>
   <updated>2015-03-23T00:00:00+08:00</updated>
   <id>http://wildpig95.github.io/book/2015/03/23/读书笔记_电子口岸实用功能</id>
   <content type="html">&lt;p&gt;话说自己出来之后，涉及到海关电子口岸数据中心一些活。木法儿，不懂业务就木办法跟客户深入交流，来不得项目，也就没有办法做好自己想做的产品。唯有恶补，在省图借了基本关于海关信息化的书籍了解一下业务。这里通过文字梳理出来，也帮助理解，就当读书笔记了。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;中国海关自己出的这一套介绍性图书“关务通.电子口岸系列”，从IT人的角度来说，这本《电子口岸—使用功能》基本上可以理解成为《电子口岸综合信息管理系统说明书》。&lt;/p&gt;

&lt;p&gt;文中大量的文字和图片描述了电子口岸各系统的如何使用，谁来使用，干什么用的问题。这些东西拿来成册出书，感觉有点怪。不过作了这些年中国人，能理解作为中国海关出版社，总要做点事情、歌功颂德、拿来表功的迫切心情。其实，让开发厂商出个电子文档放在百度文库上，正能量就杠杠的了。&lt;/p&gt;

&lt;p&gt;对于希望了解电子口岸业务的人来说，倒不失为一种扫盲手段。从图书馆借了这本书，快速浏览，马上总结。希望对大伙有帮助。&lt;/p&gt;

&lt;p&gt;本书内容不多，包含5个章节。主要说明了几个问题：&lt;/p&gt;

&lt;p&gt;1 什么是电子口岸？
2 电子口岸的客户有哪些？
3 在使用电子口岸系统之前需要做哪些准备工作？
4 电子口岸的执法系统都有哪些？
5 电子口岸的预录入系统是怎么回事？&lt;/p&gt;

&lt;p&gt;我们逐个掰扯掰扯：&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;么是电子口岸？&lt;/h1&gt;

&lt;p&gt;进出口贸易本身并不是多复杂，但是环节较多，只有海关一个部门搞不定所有的进出口贸易管理。在中国”国强民弱”的背景下，国务院下属15个部位机关都要对进出口贸易的相关环节进行管理。同时，政府信息化的要求也带来了问题，进出口贸易的这些业务信息流、资金信息流和货物信息流又需要集中化管理。因此，国务院让海关总署牵头，其他部门配合，建设电子口岸系统。&lt;/p&gt;

&lt;p&gt;对外贸企业来说，电子口岸是报关、网上支付、外汇核销、出口退税等“一站式”政务服务平台；
对政府来说，电子口岸是数据共享、联网核查的数据汇聚点；&lt;/p&gt;

&lt;p&gt;电子口岸分两级架构，国家电子口岸（国务院15个部门共同建设，主要为政府服务）；地方电子口岸由地方政府牵头建设，为政府和外贸企业提供服务。&lt;/p&gt;

&lt;p&gt;电子口岸归根到底是为外贸服务和政府管理外贸服务的信息平台。注意：平台就是平台，不是机关单位实体。谁来建设这个平台呢？中国电子口岸数据中心以及各地电子口岸数据分中心。2001年成立，是电子口岸的建设主体事业单位，具备独立法人资格（直属于海关总署）。负责电子口岸的日常开发、运维和客服工作。&lt;/p&gt;

&lt;p&gt;说早年间，数据中心是承办电子口岸用户卡制作的，赶上信息化的时代，也就顺理成章的发展壮大起来。这里面的问题随着业务了解的深入，回头讨论：）&lt;/p&gt;

&lt;p&gt;数据中心成立10多年来，干了有117个应用项目，政府服务的32个，企业服务42个，物流商务服务的23个，工具类15个，安全类5个。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;谁来用电子口岸平台？&lt;/h1&gt;

&lt;p&gt;分两类，一类是企业通关相关的企业。包括专门的报关企业和代理报关企业，外贸企业（一般有规模的外贸玩家），加贸企业（没有进出口经营权）相对比较低端的来料加工、进料加工等等。&lt;/p&gt;

&lt;p&gt;另外一类是政府机关。包括商务、外汇局、海关、国税、工商管理、技术监督、银行等。&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;在中国做外贸的第一步？ 敲门砖&lt;/h1&gt;

&lt;p&gt;首先你得经过电子口岸认可你，得去申请办卡（IC卡），有了IC卡，就可以登录电子口岸的相关系统做各种业务。所以海关的IC卡就是外贸的敲门砖。需要6个步骤申请办理。&lt;/p&gt;

&lt;p&gt;在互联网时代，如果这个业务让BAT提供服务，分分钟搞定，就像你去申请个腾讯微信公众号，或者在阿里巴巴开个网店。&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;电子口岸执法系统&lt;/h1&gt;

&lt;p&gt;电子口岸执法系统这个名字没有起好。这套系统其实是外贸公司从事进出口贸易过程中，如果涉及到外汇业务（收汇、付汇）、退税、网上支付等业务时，通过电子口岸执法系统的对应子系统进行业务操作。&lt;/p&gt;

&lt;p&gt;由于这些业务流程里面涉及国家机关的核查、审批等工作，所以这些活统称为“执法系统”。但实际上，这些工作只是企业完成整个外贸业务的一个环节，应该以企业服务的理念出发，统称为“通关服务系统”。&lt;/p&gt;

&lt;p&gt;对于的确需要核查的，在政府机关内部称之为”执法核查“系统没有啥问题，甚至执法核查可以通过时候进行抽检，通过建立企业商业诚信档案，以及相关法律法规的配套完善，引导企业走上遵守法律法规的健康之路。&lt;/p&gt;

&lt;p&gt;电子口岸执法系统包括出口收汇，进口付汇，退税系统，网上支付系统，无纸化网上签约，代理报关委托，企业单子系统，快件管理，小型船舶（深圳），公路口岸（广东），身份认证，监管证件联网（ATA单证册，环保许可，汽车进口，海关与贸促会原产地证书电子联网核查，中欧安全智能贸易航线等）。&lt;/p&gt;

&lt;h1 id=&quot;qpquick-pass&quot;&gt;电子口岸预录入系统（QP:quick pass）&lt;/h1&gt;

&lt;p&gt;这部分就是纯的企业服务系统了，包括通关管理类系统，加工贸易类系统，企业管理类系统，物流监管类系统，减免税类系统以及其他系统。&lt;/p&gt;

&lt;p&gt;种类繁多，业务复杂，从面儿上看是这样的。其实很多事情是前期规划不足，历史遗留问题，管理权限过大，服务意识不足导致的信息孤岛，纯功能或者领导意思为转移的”难用“系统转嫁到企业头上。&lt;/p&gt;

&lt;p&gt;还有啊，为啥叫做quick pass呢？主要是各类外贸企业的信息申报，你要做什么事情，要提前报上来让海关知道，海关看看能不能做，实际的核心业务含义是通关申报业务。&lt;/p&gt;

&lt;p&gt;本书的读书笔记就到这里吧。&lt;/p&gt;
</content>
 </entry>
 
 
</feed>